from aiogram import F
from aiogram.types import Message, CallbackQuery, FSInputFile
from utils.bot_entity import bot
from aiogram.enums.parse_mode import ParseMode
from utils.keyboards import clear_button, schedule_markup
from utils.work_with_db import has_schedule, delete_schedule
from aiogram import Router

router = Router()


@router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—åüóë")
async def clear_schedule(message: Message):
    if has_schedule(message.from_user.id):
        await message.answer(text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n"
                                  "<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ùóÔ∏è\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</b>‚ö†\n"
                                  "–ü–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è <b>–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</b> —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ "
                                  "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</b>",
                             reply_markup=clear_button,
                             parse_mode=ParseMode.HTML)
    else:
        await message.answer(text="<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å!</b>",
                             parse_mode=ParseMode.HTML,
                             reply_markup=schedule_markup)
        gif = FSInputFile("media/–ª–æ—Å—è—à.mp4")
        await message.answer_video(gif)


@router.callback_query(lambda query: query.data == 'yes_clear')
async def clear_yes(query: CallbackQuery):
    delete_schedule(query.from_user.id)
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    await query.message.answer(text="<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!</b>",
                               parse_mode=ParseMode.HTML,
                               reply_markup=schedule_markup)


@router.callback_query(lambda query: query.data == 'no_clear')
async def clear_no(query: CallbackQuery):
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    await query.message.answer(text="<b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>‚ôª",
                               parse_mode=ParseMode.HTML,
                               reply_markup=schedule_markup)
