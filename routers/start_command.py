from aiogram import Router
from config import admins
from keyboards import menu_markup, yes_no_button, admin_markup
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums.parse_mode import ParseMode
from work_with_db import check_user_exists, add_user_to_database, has_schedule, copy_schedule
from utils import extract_unique_code, bot
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import types


class Share(StatesGroup):
    ans = State()


router = Router()


async def start_command(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_exists = check_user_exists(user_id)
    if user_exists is None or not user_exists:
        add_user_to_database(user_id, message.from_user.full_name)

    unique_code = extract_unique_code(message.text)
    if unique_code:
        return await handle_unique_code(message, state, int(unique_code))

    if str(message.from_user.id) in admins:
        await message.answer(f"<b>{message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ï–§–£ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>",
                             reply_markup=admin_markup, parse_mode=ParseMode.HTML)
    else:
        await message.answer(f"<b>{message.from_user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ï–§–£ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>",
                             reply_markup=menu_markup, parse_mode=ParseMode.HTML)


async def handle_unique_code(message: Message, state: FSMContext, unique_code: int):
    referred_user_exists = check_user_exists(unique_code)
    user_id = message.from_user.id
    if str(user_id) in admins:
        markup = admin_markup
    else:
        markup = menu_markup
    if user_id == unique_code:
        await message.answer("<b>–ù–µ–ª—å–∑—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>", reply_markup=markup,
                             parse_mode=ParseMode.HTML)
        return

    if not referred_user_exists:
        await message.answer("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>", reply_markup=markup,
                             parse_mode=ParseMode.HTML)
        return

    if not has_schedule(unique_code):
        await message.answer(f"–í —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì\n–õ—É—á—à–µ –µ–≥–æ –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å :)\n"
                             f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.‚òëÔ∏è",
                             reply_markup=markup,
                             parse_mode=ParseMode.HTML)
        return
    await state.set_state(Share.ans)
    await state.update_data(ans=unique_code)
    await message.answer(f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å <b>—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</b> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å üÜî {unique_code}?\n"
                         f"–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è\n"
                         f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–æ–±–Ω–æ–≤–∏—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>\n"
                         f"–ï–≥–æ <b>–Ω–µ–ª—å–∑—è</b> –±—É–¥–µ—Ç <b>–æ—Ç–º–µ–Ω–∏—Ç—å</b>‚ö†Ô∏è\n"
                         f"–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –ø–æ —Å—Å—ã–ª–∫–µ <b>–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</b> —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ "
                         f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</b>",
                         reply_markup=yes_no_button,
                         parse_mode=ParseMode.HTML)


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext):
    await start_command(message, state)


@router.callback_query(lambda query: query.data == 'yes', Share.ans)
async def process_share_yes(query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    referer = user_data.get('ans')
    await state.clear()
    copy_schedule(int(referer), int(query.from_user.id))
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    if str(query.from_user.id) in admins:
        markup = admin_markup
    else:
        markup = menu_markup
    await query.message.answer(text="<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</b>",
                               parse_mode=ParseMode.HTML,
                               reply_markup=markup)


@router.callback_query(lambda query: query.data == 'no', Share.ans)
async def process_share_no(query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=query.from_user.id, message_id=query.message.message_id)
    if str(query.from_user.id) in admins:
        markup = admin_markup
    else:
        markup = menu_markup
    await query.message.answer(text="<b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>‚ôª",
                               parse_mode=ParseMode.HTML,
                               reply_markup=markup)
