from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.enums.parse_mode import ParseMode
from work_with_db import get_schedule_by_day_offset
from utils import day_of_week_dict, generate_schedule_response, get_week_parity, get_local_time

router = Router()


@router.message(F.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—èüìñ")
async def get_schedule_today(message: Message):

    current_time = get_local_time()
    current_day_of_week = current_time.isoweekday()

    if current_day_of_week == 7:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∞ –∑–Ω–∞—á–∏—Ç <b>–í–´–•–û–î–ù–û–û–û–û–ô!</b>\n–°–∏–ª—å–Ω–æ –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ–º—Å—è,"
                             " –≤–µ–¥—å –∑–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ :)", parse_mode=ParseMode.HTML)
        gif = FSInputFile("media/–æ—Ç–¥—ã—Ö–∞–µ–º.mp4")
        await message.answer_video(gif)
        return

    user_id = message.from_user.id
    current_schedule = get_schedule_by_day_offset(user_id, current_day_of_week, get_week_parity())

    if not current_schedule:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —É –í–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π, <b>–æ—Ç–¥—ã—Ö–∞–µ–º!</b>", parse_mode=ParseMode.HTML)
        gif = FSInputFile("media/—Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞–µ–º.mp4")
        await message.answer_video(gif)
        return

    current_day_name = day_of_week_dict.get(current_day_of_week, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å")
    response_text = generate_schedule_response(current_schedule, f"—Å–µ–≥–æ–¥–Ω—è\n{current_day_name.capitalize()}"
                                                                 f" <i>{current_time.day:02d}"
                                                                 f".{current_time.month:02d}</i>")
    await message.answer(response_text, parse_mode=ParseMode.HTML)
