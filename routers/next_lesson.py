from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
import re
from aiogram.enums.parse_mode import ParseMode
from work_with_db import get_schedule_by_day_offset
from utils import get_local_time, get_week_parity, generate_schedule_response, format_time_str, get_next_two_weeks_dates
from datetime import datetime
from keyboards import next_lesson_markup, schedule_markup


router = Router()


class ReturnButton(StatesGroup):
    return_to_schedule = State()


@router.message(F.text == "–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üîú")
async def nearest_lesson(message: Message, state: FSMContext):
    await state.set_state(ReturnButton.return_to_schedule)
    await message.answer(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:</b>', parse_mode=ParseMode.HTML, reply_markup=next_lesson_markup)


@router.message(F.text == "–ù–∞–∑–∞–¥üîô", ReturnButton.return_to_schedule)
async def back_btn(message: Message):
    await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –Ω–∏–∂–µüîΩ", reply_markup=schedule_markup)


def format_current_lesson_text(pair):
    lesson = generate_schedule_response([pair], '')
    lesson = lesson.replace('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ üóì', f'–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞: ', -1)
    return lesson


@router.message(F.text == "–¢–µ–∫—É—â–∞—èüåÖ")
async def current_lesson(message: Message, state: FSMContext):
    await state.set_state(ReturnButton.return_to_schedule)
    user_id = message.from_user.id

    current_time = get_local_time()
    current_day_of_week = current_time.isoweekday()
    time_now = current_time.time()

    schedule = []
    day = get_schedule_by_day_offset(user_id, current_day_of_week, get_week_parity())

    if not day:
        return await message.answer('<b>–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø–∞—Ä!</b>', parse_mode=ParseMode.HTML)

    for data in day:
        lesson_start_time = datetime.strptime(data[-3], "%H:%M").time()
        lesson_end_time = datetime.strptime(data[-2], "%H:%M").time()

        if lesson_end_time >= time_now >= lesson_start_time:
            schedule.append(data)

    if len(schedule) == 1:
        current_pair = schedule[0]
        current_lesson_text = format_current_lesson_text(current_pair)

        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã
        lesson_end_time = datetime.strptime(current_pair[-2], "%H:%M").time()

        # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        time_until_end_seconds = (lesson_end_time.hour * 3600 + lesson_end_time.minute * 60 -
                                  (time_now.hour * 3600 + time_now.minute * 60 + time_now.second))

        if time_until_end_seconds > 0:
            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã
            hours, remainder = divmod(time_until_end_seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            time_until_end_str = format_time_str(0, hours, minutes, seconds)

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            current_lesson_text += f"\n<b>–î–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å:</b> {time_until_end_str}"

        await message.answer(text=current_lesson_text, parse_mode=ParseMode.HTML)

    elif len(schedule) > 1:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–≤–µ –∏–ª–∏ –±–æ–ª–µ–µ –ø–∞—Ä—ã –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è
        await message.answer('<b>–£ –≤–∞—Å –¥–≤–µ –∏–ª–∏ –±–æ–ª–µ–µ –ø–∞—Ä—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.</b>\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.'
                             '\n–ï—Å–ª–∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ <a href="https://t.me/shevelev_rv">'
                             '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ</a>',
                             parse_mode=ParseMode.HTML,
                             disable_web_page_preview=True)
    else:
        await message.answer(text='<b>–°–µ–π—á–∞—Å –Ω–µ –∏–¥—ë—Ç –Ω–∏–∫–∞–∫–∞—è –ø–∞—Ä–∞!</b>', parse_mode=ParseMode.HTML)


@router.message(F.text == "–°–ª–µ–¥—É—é—â–∞—è‚û°Ô∏è")
async def next_lesson(message: Message, state: FSMContext):
    await state.set_state(ReturnButton.return_to_schedule)
    user_id = message.from_user.id

    current_time = get_local_time()
    current_day_of_week = current_time.isoweekday()
    time_now = current_time.time()

    schedule = []
    date = get_next_two_weeks_dates()
    index = -1
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
    for i in range(current_day_of_week, 7):
        day = get_schedule_by_day_offset(user_id, i, get_week_parity())
        index += 1
        if not day:
            continue
        for data in day:
            lesson_start_time = datetime.strptime(data[-3], "%H:%M").time()
            if i == current_day_of_week and time_now >= lesson_start_time:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å
            schedule.append((data, date[index]))

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã —Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    for i in range(1, 7):
        day = get_schedule_by_day_offset(user_id, i, (get_week_parity() + 1) % 2)
        index += 1
        if not day:
            continue
        for data in day:
            schedule.append((data, date[index]))

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    for i in range(1, current_day_of_week + 1):
        day = get_schedule_by_day_offset(user_id, i, get_week_parity())
        index += 1
        if not day:
            continue
        for data in day:
            lesson_start_time = datetime.strptime(data[-3], "%H:%M").time()
            if i == current_day_of_week + 1 and time_now >= lesson_start_time:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å
            schedule.append((data, date[index]))

    day_of_week_dict = {1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–≤—Ç–æ—Ä–Ω–∏–∫", 3: "—Å—Ä–µ–¥–∞", 4: "—á–µ—Ç–≤–µ—Ä–≥", 5: "–ø—è—Ç–Ω–∏—Ü–∞", 6: "—Å—É–±–±–æ—Ç–∞",
                        7: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 8: "–≤—Ç–æ—Ä–Ω–∏–∫", 9: "—Å—Ä–µ–¥–∞", 10: "—á–µ—Ç–≤–µ—Ä–≥", 11: "–ø—è—Ç–Ω–∏—Ü–∞", 12: "—Å—É–±–±–æ—Ç–∞"}

    try:
        pair = schedule[0][0]

        day = day_of_week_dict.get(int(pair[1]))
        lesson = generate_schedule_response([pair], '')

        lesson_info = lesson.split('\n')[-2]
        time_start_match = re.search(r'<b>–í—Ä–µ–º—è:</b>\s+(\d{1,2}:\d{2})', lesson_info)

        if time_start_match:
            time_start = time_start_match.group(1)

            timezone_info = current_time.tzinfo

            date_time_str = schedule[0][1] + ' ' + time_start
            date_time_format = '%d.%m.%Y %H:%M'

            date_time = datetime.strptime(date_time_str, date_time_format).replace(tzinfo=timezone_info)
            time_left = date_time - current_time
            days = time_left.days

            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            time_left_str = format_time_str(days, hours, minutes, seconds)

            new_date_str = schedule[0][1][:-5]
            lesson = lesson.replace('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ üóì', f'–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –±—É–¥–µ—Ç: {new_date_str}üóì\n({day})', -1)

            await message.answer(text=f"{lesson}\n<b>–î–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã:</b> {time_left_str}",
                                 parse_mode=ParseMode.HTML)
        else:
            await message.answer(text='<b>–£ –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã.</b>\n'
                                 '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.'
                                 '\n–ï—Å–ª–∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ <a href="https://t.me/shevelev_rv">'
                                 '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ</a>',
                                 parse_mode=ParseMode.HTML,
                                 disable_web_page_preview=True)
    except IndexError:  # –ø–∞—Ä –Ω–µ—Ç
        await message.answer(text=f"<b>–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä!</b> –£–∂–µ –≤—ã–ø—É—Å—Ç–∏–ª–∏—Å—å?", parse_mode=ParseMode.HTML)
